{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SaraOshritYosian/CCTech/blob/master/Gradient%20Decent%20Ex01%20Part%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9fhj8RHgavX-"
      },
      "source": [
        "Code taken from: https://www.kaggle.com/rakend/simple-linear-regression-using-gradient-descent with small changes"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Noga Oren 206970519"
      ],
      "metadata": {
        "id": "QvQDIvZF9Pns"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Sara Oshrit Yosian 324233915"
      ],
      "metadata": {
        "id": "2fgZqTAT9OdW"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v8xn-ijcTnPB",
        "outputId": "b10824ac-698d-4241-d0bc-df733cf0ab2c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-learn==1.1.3\n",
            "  Downloading scikit_learn-1.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (30.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m30.5/30.5 MB\u001b[0m \u001b[31m48.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.1.3) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.1.3) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.1.3) (1.4.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.1.3) (3.5.0)\n",
            "Installing collected packages: scikit-learn\n",
            "  Attempting uninstall: scikit-learn\n",
            "    Found existing installation: scikit-learn 1.2.2\n",
            "    Uninstalling scikit-learn-1.2.2:\n",
            "      Successfully uninstalled scikit-learn-1.2.2\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "bigframes 1.4.0 requires scikit-learn>=1.2.2, but you have scikit-learn 1.1.3 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed scikit-learn-1.1.3\n"
          ]
        }
      ],
      "source": [
        "\n",
        "#from sklearn.datasets import load_boston #This code no longer works and give the error unless you say\n",
        "!pip install scikit-learn==1.1.3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "myhXsURvavYD",
        "outputId": "9cf6ea35-0cd3-49a6-ea3f-b637929db686"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function load_boston is deprecated; `load_boston` is deprecated in 1.0 and will be removed in 1.2.\n",
            "\n",
            "    The Boston housing prices dataset has an ethical problem. You can refer to\n",
            "    the documentation of this function for further details.\n",
            "\n",
            "    The scikit-learn maintainers therefore strongly discourage the use of this\n",
            "    dataset unless the purpose of the code is to study and educate about\n",
            "    ethical issues in data science and machine learning.\n",
            "\n",
            "    In this special case, you can fetch the dataset from the original\n",
            "    source::\n",
            "\n",
            "        import pandas as pd\n",
            "        import numpy as np\n",
            "\n",
            "        data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n",
            "        raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n",
            "        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n",
            "        target = raw_df.values[1::2, 2]\n",
            "\n",
            "    Alternative datasets include the California housing dataset (i.e.\n",
            "    :func:`~sklearn.datasets.fetch_california_housing`) and the Ames housing\n",
            "    dataset. You can load the datasets as follows::\n",
            "\n",
            "        from sklearn.datasets import fetch_california_housing\n",
            "        housing = fetch_california_housing()\n",
            "\n",
            "    for the California housing dataset and::\n",
            "\n",
            "        from sklearn.datasets import fetch_openml\n",
            "        housing = fetch_openml(name=\"house_prices\", as_frame=True)\n",
            "\n",
            "    for the Ames housing dataset.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sklearn\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the data set\n",
        "from sklearn.datasets import load_boston\n",
        "boston_data = load_boston()\n",
        "#print(boston_data['DESCR'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e9IV4zXLavYE"
      },
      "source": [
        "If you print(boston_data['DESCR']) you get a description of the fields below.  RM is the number of rooms in the house and is the field we will focus on right now."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "pzR2LO3qavYE",
        "outputId": "618ed209-e3a4-463b-d9ea-d2606b929385"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n",
              "0    0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n",
              "1    0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n",
              "2    0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n",
              "3    0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n",
              "4    0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n",
              "..       ...   ...    ...   ...    ...    ...   ...     ...  ...    ...   \n",
              "501  0.06263   0.0  11.93   0.0  0.573  6.593  69.1  2.4786  1.0  273.0   \n",
              "502  0.04527   0.0  11.93   0.0  0.573  6.120  76.7  2.2875  1.0  273.0   \n",
              "503  0.06076   0.0  11.93   0.0  0.573  6.976  91.0  2.1675  1.0  273.0   \n",
              "504  0.10959   0.0  11.93   0.0  0.573  6.794  89.3  2.3889  1.0  273.0   \n",
              "505  0.04741   0.0  11.93   0.0  0.573  6.030  80.8  2.5050  1.0  273.0   \n",
              "\n",
              "     PTRATIO       B  LSTAT  \n",
              "0       15.3  396.90   4.98  \n",
              "1       17.8  396.90   9.14  \n",
              "2       17.8  392.83   4.03  \n",
              "3       18.7  394.63   2.94  \n",
              "4       18.7  396.90   5.33  \n",
              "..       ...     ...    ...  \n",
              "501     21.0  391.99   9.67  \n",
              "502     21.0  396.90   9.08  \n",
              "503     21.0  396.90   5.64  \n",
              "504     21.0  393.45   6.48  \n",
              "505     21.0  396.90   7.88  \n",
              "\n",
              "[506 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-43716403-65a1-47be-ae3c-15c654e4b5c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CRIM</th>\n",
              "      <th>ZN</th>\n",
              "      <th>INDUS</th>\n",
              "      <th>CHAS</th>\n",
              "      <th>NOX</th>\n",
              "      <th>RM</th>\n",
              "      <th>AGE</th>\n",
              "      <th>DIS</th>\n",
              "      <th>RAD</th>\n",
              "      <th>TAX</th>\n",
              "      <th>PTRATIO</th>\n",
              "      <th>B</th>\n",
              "      <th>LSTAT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.00632</td>\n",
              "      <td>18.0</td>\n",
              "      <td>2.31</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.538</td>\n",
              "      <td>6.575</td>\n",
              "      <td>65.2</td>\n",
              "      <td>4.0900</td>\n",
              "      <td>1.0</td>\n",
              "      <td>296.0</td>\n",
              "      <td>15.3</td>\n",
              "      <td>396.90</td>\n",
              "      <td>4.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.02731</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.469</td>\n",
              "      <td>6.421</td>\n",
              "      <td>78.9</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2.0</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>396.90</td>\n",
              "      <td>9.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.02729</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.469</td>\n",
              "      <td>7.185</td>\n",
              "      <td>61.1</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2.0</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>392.83</td>\n",
              "      <td>4.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.03237</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.458</td>\n",
              "      <td>6.998</td>\n",
              "      <td>45.8</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3.0</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.7</td>\n",
              "      <td>394.63</td>\n",
              "      <td>2.94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.06905</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.458</td>\n",
              "      <td>7.147</td>\n",
              "      <td>54.2</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3.0</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.7</td>\n",
              "      <td>396.90</td>\n",
              "      <td>5.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>501</th>\n",
              "      <td>0.06263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.593</td>\n",
              "      <td>69.1</td>\n",
              "      <td>2.4786</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>391.99</td>\n",
              "      <td>9.67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502</th>\n",
              "      <td>0.04527</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.120</td>\n",
              "      <td>76.7</td>\n",
              "      <td>2.2875</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>396.90</td>\n",
              "      <td>9.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>503</th>\n",
              "      <td>0.06076</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.976</td>\n",
              "      <td>91.0</td>\n",
              "      <td>2.1675</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>396.90</td>\n",
              "      <td>5.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>0.10959</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.794</td>\n",
              "      <td>89.3</td>\n",
              "      <td>2.3889</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>393.45</td>\n",
              "      <td>6.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>505</th>\n",
              "      <td>0.04741</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.030</td>\n",
              "      <td>80.8</td>\n",
              "      <td>2.5050</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>396.90</td>\n",
              "      <td>7.88</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>506 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43716403-65a1-47be-ae3c-15c654e4b5c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-43716403-65a1-47be-ae3c-15c654e4b5c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-43716403-65a1-47be-ae3c-15c654e4b5c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6266a504-1ea2-4848-bf5b-1c71db0130d8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6266a504-1ea2-4848-bf5b-1c71db0130d8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6266a504-1ea2-4848-bf5b-1c71db0130d8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2ba272f8-1d76-458f-a41c-a5b358ca33ba\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2ba272f8-1d76-458f-a41c-a5b358ca33ba button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 506,\n  \"fields\": [\n    {\n      \"column\": \"CRIM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.60154510533249,\n        \"min\": 0.00632,\n        \"max\": 88.9762,\n        \"num_unique_values\": 504,\n        \"samples\": [\n          0.09178,\n          0.05644,\n          0.10574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ZN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.32245299451514,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          25.0,\n          30.0,\n          18.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDUS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.860352940897585,\n        \"min\": 0.46,\n        \"max\": 27.74,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          8.14,\n          1.47,\n          1.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CHAS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25399404134041037,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11587767566755595,\n        \"min\": 0.385,\n        \"max\": 0.871,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          0.401,\n          0.538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7026171434153233,\n        \"min\": 3.561,\n        \"max\": 8.78,\n        \"num_unique_values\": 446,\n        \"samples\": [\n          6.849,\n          4.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.148861406903617,\n        \"min\": 2.9,\n        \"max\": 100.0,\n        \"num_unique_values\": 356,\n        \"samples\": [\n          51.8,\n          33.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DIS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.105710126627611,\n        \"min\": 1.1296,\n        \"max\": 12.1265,\n        \"num_unique_values\": 412,\n        \"samples\": [\n          2.2955,\n          4.2515\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.707259384239366,\n        \"min\": 1.0,\n        \"max\": 24.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TAX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 168.53711605495903,\n        \"min\": 187.0,\n        \"max\": 711.0,\n        \"num_unique_values\": 66,\n        \"samples\": [\n          370.0,\n          666.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PTRATIO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1649455237144406,\n        \"min\": 12.6,\n        \"max\": 22.0,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          19.6,\n          15.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 91.29486438415783,\n        \"min\": 0.32,\n        \"max\": 396.9,\n        \"num_unique_values\": 357,\n        \"samples\": [\n          396.24,\n          395.11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSTAT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.141061511348571,\n        \"min\": 1.73,\n        \"max\": 37.97,\n        \"num_unique_values\": 455,\n        \"samples\": [\n          6.15,\n          4.32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "boston_data['feature_names']\n",
        "df = pd.DataFrame(data=boston_data['data'])\n",
        "\n",
        "df.columns = boston_data['feature_names']\n",
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wDOwMpoJavYF"
      },
      "source": [
        "Price is the cost in thousands of dollars."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "J88ZiOHmavYF",
        "outputId": "a65baa1d-ac07-48b3-8c1c-5515f2aad921"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n",
              "0    0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n",
              "1    0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n",
              "2    0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n",
              "3    0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n",
              "4    0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n",
              "..       ...   ...    ...   ...    ...    ...   ...     ...  ...    ...   \n",
              "501  0.06263   0.0  11.93   0.0  0.573  6.593  69.1  2.4786  1.0  273.0   \n",
              "502  0.04527   0.0  11.93   0.0  0.573  6.120  76.7  2.2875  1.0  273.0   \n",
              "503  0.06076   0.0  11.93   0.0  0.573  6.976  91.0  2.1675  1.0  273.0   \n",
              "504  0.10959   0.0  11.93   0.0  0.573  6.794  89.3  2.3889  1.0  273.0   \n",
              "505  0.04741   0.0  11.93   0.0  0.573  6.030  80.8  2.5050  1.0  273.0   \n",
              "\n",
              "     PTRATIO       B  LSTAT  Price  \n",
              "0       15.3  396.90   4.98   24.0  \n",
              "1       17.8  396.90   9.14   21.6  \n",
              "2       17.8  392.83   4.03   34.7  \n",
              "3       18.7  394.63   2.94   33.4  \n",
              "4       18.7  396.90   5.33   36.2  \n",
              "..       ...     ...    ...    ...  \n",
              "501     21.0  391.99   9.67   22.4  \n",
              "502     21.0  396.90   9.08   20.6  \n",
              "503     21.0  396.90   5.64   23.9  \n",
              "504     21.0  393.45   6.48   22.0  \n",
              "505     21.0  396.90   7.88   11.9  \n",
              "\n",
              "[506 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5e045a66-49c7-4e00-984f-eab476a2828c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CRIM</th>\n",
              "      <th>ZN</th>\n",
              "      <th>INDUS</th>\n",
              "      <th>CHAS</th>\n",
              "      <th>NOX</th>\n",
              "      <th>RM</th>\n",
              "      <th>AGE</th>\n",
              "      <th>DIS</th>\n",
              "      <th>RAD</th>\n",
              "      <th>TAX</th>\n",
              "      <th>PTRATIO</th>\n",
              "      <th>B</th>\n",
              "      <th>LSTAT</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.00632</td>\n",
              "      <td>18.0</td>\n",
              "      <td>2.31</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.538</td>\n",
              "      <td>6.575</td>\n",
              "      <td>65.2</td>\n",
              "      <td>4.0900</td>\n",
              "      <td>1.0</td>\n",
              "      <td>296.0</td>\n",
              "      <td>15.3</td>\n",
              "      <td>396.90</td>\n",
              "      <td>4.98</td>\n",
              "      <td>24.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.02731</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.469</td>\n",
              "      <td>6.421</td>\n",
              "      <td>78.9</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2.0</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>396.90</td>\n",
              "      <td>9.14</td>\n",
              "      <td>21.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.02729</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.469</td>\n",
              "      <td>7.185</td>\n",
              "      <td>61.1</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2.0</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>392.83</td>\n",
              "      <td>4.03</td>\n",
              "      <td>34.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.03237</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.458</td>\n",
              "      <td>6.998</td>\n",
              "      <td>45.8</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3.0</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.7</td>\n",
              "      <td>394.63</td>\n",
              "      <td>2.94</td>\n",
              "      <td>33.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.06905</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.458</td>\n",
              "      <td>7.147</td>\n",
              "      <td>54.2</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3.0</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.7</td>\n",
              "      <td>396.90</td>\n",
              "      <td>5.33</td>\n",
              "      <td>36.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>501</th>\n",
              "      <td>0.06263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.593</td>\n",
              "      <td>69.1</td>\n",
              "      <td>2.4786</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>391.99</td>\n",
              "      <td>9.67</td>\n",
              "      <td>22.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502</th>\n",
              "      <td>0.04527</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.120</td>\n",
              "      <td>76.7</td>\n",
              "      <td>2.2875</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>396.90</td>\n",
              "      <td>9.08</td>\n",
              "      <td>20.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>503</th>\n",
              "      <td>0.06076</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.976</td>\n",
              "      <td>91.0</td>\n",
              "      <td>2.1675</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>396.90</td>\n",
              "      <td>5.64</td>\n",
              "      <td>23.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>0.10959</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.794</td>\n",
              "      <td>89.3</td>\n",
              "      <td>2.3889</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>393.45</td>\n",
              "      <td>6.48</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>505</th>\n",
              "      <td>0.04741</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.030</td>\n",
              "      <td>80.8</td>\n",
              "      <td>2.5050</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>396.90</td>\n",
              "      <td>7.88</td>\n",
              "      <td>11.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>506 rows × 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5e045a66-49c7-4e00-984f-eab476a2828c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5e045a66-49c7-4e00-984f-eab476a2828c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5e045a66-49c7-4e00-984f-eab476a2828c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eba5b4cb-d1f3-4169-b4ca-93eb96f97584\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eba5b4cb-d1f3-4169-b4ca-93eb96f97584')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eba5b4cb-d1f3-4169-b4ca-93eb96f97584 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_04427a4a-fe1e-4396-932d-6aa567f565e9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_04427a4a-fe1e-4396-932d-6aa567f565e9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 506,\n  \"fields\": [\n    {\n      \"column\": \"CRIM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.60154510533249,\n        \"min\": 0.00632,\n        \"max\": 88.9762,\n        \"num_unique_values\": 504,\n        \"samples\": [\n          0.09178,\n          0.05644,\n          0.10574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ZN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.32245299451514,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          25.0,\n          30.0,\n          18.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDUS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.860352940897585,\n        \"min\": 0.46,\n        \"max\": 27.74,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          8.14,\n          1.47,\n          1.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CHAS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25399404134041037,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11587767566755595,\n        \"min\": 0.385,\n        \"max\": 0.871,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          0.401,\n          0.538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7026171434153233,\n        \"min\": 3.561,\n        \"max\": 8.78,\n        \"num_unique_values\": 446,\n        \"samples\": [\n          6.849,\n          4.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.148861406903617,\n        \"min\": 2.9,\n        \"max\": 100.0,\n        \"num_unique_values\": 356,\n        \"samples\": [\n          51.8,\n          33.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DIS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.105710126627611,\n        \"min\": 1.1296,\n        \"max\": 12.1265,\n        \"num_unique_values\": 412,\n        \"samples\": [\n          2.2955,\n          4.2515\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.707259384239366,\n        \"min\": 1.0,\n        \"max\": 24.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TAX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 168.53711605495903,\n        \"min\": 187.0,\n        \"max\": 711.0,\n        \"num_unique_values\": 66,\n        \"samples\": [\n          370.0,\n          666.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PTRATIO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1649455237144406,\n        \"min\": 12.6,\n        \"max\": 22.0,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          19.6,\n          15.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 91.29486438415783,\n        \"min\": 0.32,\n        \"max\": 396.9,\n        \"num_unique_values\": 357,\n        \"samples\": [\n          396.24,\n          395.11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSTAT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.141061511348571,\n        \"min\": 1.73,\n        \"max\": 37.97,\n        \"num_unique_values\": 455,\n        \"samples\": [\n          6.15,\n          4.32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.197104087379818,\n        \"min\": 5.0,\n        \"max\": 50.0,\n        \"num_unique_values\": 229,\n        \"samples\": [\n          14.1,\n          22.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "df['Price'] =  boston_data['target']\n",
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kTgTofEFavYG"
      },
      "source": [
        "This is the reason we focus on RM. It is the highest positively correlated feature.  LSTAT actually is more correlated but negatively. (LSTAT is the social status of the people living in the houses.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O2xMxk9oavYG",
        "outputId": "4780a8a8-47af-4339-877b-8f86157852a1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price      1.000000\n",
              "RM         0.695360\n",
              "ZN         0.360445\n",
              "B          0.333461\n",
              "DIS        0.249929\n",
              "CHAS       0.175260\n",
              "AGE       -0.376955\n",
              "RAD       -0.381626\n",
              "CRIM      -0.388305\n",
              "NOX       -0.427321\n",
              "TAX       -0.468536\n",
              "INDUS     -0.483725\n",
              "PTRATIO   -0.507787\n",
              "LSTAT     -0.737663\n",
              "Name: Price, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "corr = df.corr()\n",
        "corr['Price'].sort_values(ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kmZ5W2paavYG"
      },
      "source": [
        "This code does two things. First, it standardizes the values.  Also, it plots them after the standardization."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 463
        },
        "id": "ndirC-ewavYG",
        "outputId": "079b546b-6509-4db6-8ecf-61f0fa753725"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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AFJw9uxZAECTJk383BIiIiJy19mzZ2E2mxVf52KoCqqrq3Hs2DHExcVBktxb0LGkpARNmjTBkSNHQmYh1VB7z6H2fgG+51B4z6H2fgG+52B8z0IInD17Fg0bNoTJpJzpwx4gBSaTCY0bN9Z0jPj4+KC8uZwJtfccau8X4HsOBaH2fgG+52DjrOdHxiRoIiIiCjkMgIiIiCjkMADygqioKEyZMgVRUVH+borPhNp7DrX3C/A9h4JQe78A33MoYxI0ERERhRz2ABEREVHIYQBEREREIYcBEBEREYUcBkBEREQUchgA+UhZWRkyMzMhSRJ27drl7+Z41aBBg9C0aVNER0cjLS0Nf/vb33Ds2DF/N8trDh48iFGjRiE9PR116tRBy5YtMWXKFJSXl/u7aV7z/PPP49prr0VMTAwSEhL83RyveOedd9C8eXNER0ejS5cu2LJli7+b5FXr1q3DwIED0bBhQ0iShG+++cbfTfKqadOm4ZprrkFcXBwaNGiAW265Bb/++qu/m+VV7733Htq1a2cpgJiVlYWlS5f6u1l+wwDIRx5//HE0bNjQ383wiV69euGLL77Ar7/+iq+//hp5eXm47bbb/N0sr/nll19QXV2NDz74AHv37sVrr72G999/H08++aS/m+Y15eXluP322zFmzBh/N8UrPv/8c0ycOBFTpkzBjh070L59e9x44404ceKEv5vmNaWlpWjfvj3eeecdfzfFJ9auXYuxY8di06ZNWL58OSoqKnDDDTegtLTU303zmsaNG+OFF17A9u3bsW3bNvTu3RuDBw/G3r17/d00/xDkdd99951o06aN2Lt3rwAgdu7c6e8m+dTChQuFJEmivLzc303xmZdeekmkp6f7uxleN3PmTGE2m/3dDN117txZjB071vL/qqoq0bBhQzFt2jQ/tsp3AIgFCxb4uxk+deLECQFArF271t9N8anExETxv//9z9/N8Av2AHnZ8ePHMXr0aHz66aeIiYnxd3N87vTp0/jss89w7bXXIiIiwt/N8Zni4mIkJSX5uxnkgfLycmzfvh3Z2dmW75lMJmRnZyMnJ8ePLSNvKi4uBoCQ+bmtqqrCvHnzUFpaiqysLH83xy8YAHmREAL33XcfHnzwQVx99dX+bo5PTZo0CbGxsUhOTsbhw4excOFCfzfJZw4cOIC33noL//jHP/zdFPLAyZMn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vVoAEADEzJkzxbFjx0SdOnUEAHHDDTc43GfEiBGWfRxp1qyZACBGjBjh9NzycZo1a1brtfz8fJt2jRkzxvJ/+68hQ4aIyspKcfHiRXHbbbcpbjd69GjFtsjbTJkyRUydOlXxGGazWaxbt07xOFVVVWLChAlCkiTFY4SHh4sPPvjA4f4zZ860bLd161aRmZlZa/8pU6Y4va6O/Pe//xUmk0mxTVFRUeLjjz9WvC7OvtwxZcoUy36//fabaN68ea3jzZw507L9jh07RMOGDZ2ef8iQIeLChQuK5/z+++9FfHy802OMHTtWVFVVOdzf+n7+5JNPRGRkpMNjXHbZZaKgoEAIIcTLL7+seA907NhRnD171uG5Xn31Vaefk/yltL8z1vfWjh07RKdOnRSP36NHD6fnOHTokGjfvr3TNrZq1Ur8+uuvDve//vrrBQBx/fXXi2+++UbExsbW2j8/P9+j97Z3717Rp08fxXZ17txZnDt3TvFYWu8XtT+n1tfA3rFjx0RGRobL++DRRx91eGytn0+oYQAUouwDICGEmDhxouV7P/74Y619fB0AdenSRQAQN910k5g/f77Yvn27+OabbyzfByCmT58uHn74YQFA3HPPPWLx4sVi+/btYt68eaJNmzaW7ZYuXeqwLfLrV199tQAgLr/8cjFjxgyxdetWsWLFCvGPf/zD8mCKj48Xhw8fdnichx56yOYh8tFHH4k1a9aILVu2iOnTp4srr7zS8vrChQtr7W/9i7xdu3ZCkiRx7733iiVLlojt27eLBQsWiO+++87pdbX3zjvvWI5Zv3598corr4icnByxfv16MXXqVMvDR5IksWTJEpt99+zZI/bs2SMGDx4sAIiGDRtavid/ucM6AGrXrp2IiIgQDz/8sFi+fLnYtm2bmDt3rti4caMQQog//vhDJCYmWto2cuRI8f3334tt27aJTz75xOYX/J133unwfDt37rQELBEREWLChAli9erVYsuWLeKDDz4Q6enplmM8/vjjDo8h38+ZmZkiMjJSZGRkiI8++khs3bpVrFq1SgwfPtxyjGHDhomvv/5aABBdu3YVn332mdi2bZtYtmyZuOmmmyzbTZo0qdZ5du/ebbnH0tPTxf/93/+JlStXip07d4p169aJ6dOni3vuuUfExsZqDoCuueYay3X77rvvxLZt28ScOXMs3wcgbrnlFofHOXnypGjSpIkAagLncePGiS+//FJs3bpVrF69WkyePFnExMQIAKJFixaiqKio1jHkh396erqoW7euqF+/vnjhhRfEhg0bxKZNm8Rbb70l/vzzT4/e27XXXitMJpMYMWKEzc9NVlaWZZsnnnjC4XH0uF/0CICGDh1qOc7w4cPF/PnzxaZNm8TWrVvFokWLxNNPPy3at2/vMADS4/MJNQyAQpSjAOj48eOWh2KvXr1q7ePrAAiAGD9+fK1tSktLLedKTk4WkiSJ119/vdZ2BQUFIi4uTgAQgwYNctgW63Mp/YX+ySefWLa5/fbba73+ww8/WF7/3//+5/A8Fy5cEL1797a874qKCpvXrX+ROzuOWidOnLD8smvYsKHDwG3Hjh2Wz7tRo0aivLy81jbOPit3WAdAJpNJfP/994rbWvfmOboOFy9eFL169bJs4ygwlB/oYWFhDs91+vRpy1/aJpNJ5Obm1tpGvsfkh2tpaaliW8PCwkRSUpIYOnSoqKystNmmsrJSdO3a1XK/2n/2Tz31lAAgYmNjRWFhoeJ1KSoqUux9cMb+3vrvf/9ba5uKigpx4403WraxD4iFEOKee+6x3Au///67w3NZ31NPPvlkrdflh798Xx46dMjt9+PsvX366ae1trl48aJo27at4vUXQp/7RWsAdOHCBRERESEA5R4e2alTp2p9T4/PJ9QwAApRjgIgIYSYNGmS5furVq2y2cfXAVCTJk0cPpSFEOLpp5+2bNe1a1fFc917770CgEhMTHT4uvUvz23btikep3///gKoGcaShztkcmAzdOhQxf2FEGLfvn2Wc/3www82r1n/Iu/du7fT46jx4osvWo43b948xe2ee+45y3ZffPFFrde9EQDdf//9itsdPXpUhIWFCQCiX79+itvl5+eL8PBwAdT0EFrbvHmz5VwPPvig4jHWr19v2e6hhx6q9bp8P0uSJPbt2+fwGKtWrbIcIyYmxuGDSQghPvroI8t2u3fvtnlt9OjRAoDo0KGDYlu1sO9drK6udrjdkSNHLA/gAQMG2LyWn59v+Vy+/fZbp+d7/PHHLQGOPesA6JNPPvH8Tf3F+r0NGTJEcbv3339f8frrdb9oDYCOHj1qOYajXmJn9Pp8Qg2ToMnGv/71L8TFxQEAnnrqKb+2ZciQIYqzj9q3b2/5t7Mq1vJ2Z86cQVFRkeJ2V111FTp16qT4+v333w8AqKysxJo1ayzfLykpsfz/tttuU9wfAK644gpLyYGcnBzF7YYNG+b0OGrI9XsSEhIwZMgQxe3+/ve/19rH25y9vzVr1lgScUeNGqW4XfPmzdG3b99a+wC278PZMbp164Yrrrii1j722rVrZ9nOnvV92LdvXyQlJbnc7vfff7d5LS0tDQCwb98+jycgqDVixAjFBPbGjRvjhhtuAFD7mi5ZsgRVVVWIiYlB//79nZ6jR48eAIBjx47h8OHDDreJjIzE7bff7slbUOTsvrL+2ba//nrfL55KTk5GZGQkAODTTz9FZWWl6n31/nxCBQMgspGcnIzx48cDADZs2IDvv//eb2257LLLFF9LSEhweztns3CuueYap23p3Lmz5d/WFbN37tyJ6upqADVLRtjPlLL/kmcMFRYWKp6rXbt2TtuiRm5uLgCgY8eOTqewp6SkWGbjyft4m7P3Z92GLl26OD2O/Pr58+dtHmryMSIjI5GZmanqGPv370d5ebnDbbx9H959992IiIhAWVkZunXrhoEDB+L9999Hbm6uR7O+nFF7n5eWltpc023btgGoudbh4eFO7/Gbb77Zsp/Sfd66dWtER0drfTs22rRpo/iadWBqf/31vl88FRUVZflj7quvvkKrVq3w+OOP47vvvnP6xxug/+cTKhgAUS0TJ060/MKeMmWK39oRExOj+JrJZHJ7O2dTfBs0aOC0LSkpKZZ/nz592vLvEydOON1PibMpuYmJiR4d05rcRlfvCwBSU1Nt9vE2Z+/Pug2u2i63234/+d9JSUkID3de7F4+hhACZ86ccbiNt+/DNm3aYO7cuUhMTERlZSUWL16MMWPG4KqrrkKDBg3wt7/9DT/++KPT96GWUe5zPe5xe55ef73vFy3efvttDBw4EEBN6YmXX34ZAwYMQHJyMq655hq8/PLLKC4urrWfN34PhQIuhUG1JCQkYOLEiXj66aexefNmLF682OavhmDk6QKv1r9MP/jgA1x77bWq9nP2AAgLC/OoLY4YceFate9Pa9uN+N6VDB06FNnZ2fj888/x/fff48cff8Sff/6JkydPYvbs2Zg9ezZGjBiBjz76yOZh7i6t93m9evWwevVq1fulp6c7/L6e97hejHC/xMfHY9GiRdiyZQu++OILrFmzBrt27UJVVRW2bduGbdu24ZVXXsE333yDrKwsy356fz6hggEQOTR+/Hi88cYbOHXqFKZMmaIqAJJ/MctDQkpKS0t1aaOejh8/rvp16+705ORky79jYmLQtm1b/RvngaSkJBQUFLh8X8ClbnCl/BVfsm7D8ePH0aRJE8VtrbvvrfeT/33q1ClUVlY6/atePoYkSV7plXCH2WzGAw88YClK+vPPP2PhwoV46623cOzYMXz88cfo0KEDHnnkEY/Pcfz4cadDda7u87Nnz+KKK64wZADjKb3uF0mSIITQ5fdf586dLcORZ8+exZo1azBr1izMnz8fJ06cwNChQ5GXl4c6deoACO7Px5s4BEYOxcXF4V//+heAmgq4CxYsULUPAJddw84qIvvL1q1bVb9uHeRkZmZa/nLcsGGDdxrnAbmNO3bscJpMeeLECRw6dMhmH3+ybsPmzZudbisnDMfExKBFixa1jlFeXo5du3apOkbr1q0tCahGccUVV+CJJ57Apk2bEBsbCwD44osvNB1T7X1uf007dOgAoGZpFDnfJFjodb+o+f0nhMCBAwfcal9cXBwGDhyIr7/+Gv/85z8BAAUFBTaVqYP58/EmBkCkaNy4cZacgSlTprhMyJS7U3fs2KG47d69e/HTTz/p21Ad7Nmzx+lCsB999BGAmq576xL29evXR9euXQEAc+bMwZ9//unVdqqVnZ0NACgqKsL8+fMVt5sxY4bls5L38aeePXta/nqVr7kjhw8fxvLly2vtA9i+D2fHyMnJwb59+2rtYzRNmjSx9NrYL7vhrk8//VTxZ/Po0aP44YcfANS+pgMHDrQE+q+//rqmNhiNXveL/PvPWQCydOlSlwnNzvTp08fyb+t7IZg/H29iAESKYmNjMWnSJAA1AcJ3333ndPvrr78eQM30yrlz59Z6/ezZs06nmfrbAw884LB7es6cOZb3fsstt1imLcv+85//AKiZEn/bbbc5/QVXVlaGd955BxcvXtSv4Q6MHDnSkhT66KOPOlzLbPfu3fjvf/8LAGjUqBFuueUWr7ZJjYYNG+LWW28FUPOwkNcis1ZeXo7777/fshbcuHHjbF7v3Lkzrr76agDA9OnTsXLlylrHKC4uxj/+8Q8ANUO3Y8aM0fV9uOObb75xes8cOXIEv/zyCwDtORu7du3Cyy+/XOv7lZWVGD16tGVmk/31uPzyyy3T1ufNm4dXX33V6Xny8/Md/g4wIr3uF/n33+bNmx32BhcWFuLhhx9WbMfvv/+OtWvXOm2rHKACtvdCMH8+XuW3CkTkV0qFEO2dP39epKWl2RQMVLptTpw4YVlLJzo6WjzzzDNi06ZNYvPmzeLdd98VrVq1EtHR0aJDhw6qCiE6a5d1+1evXq24nXWhNEdrDMmvyUthtGnTRsycOVNs27ZNrFy5UowZM8ayTEFcXJziOkWPPPKI5Vipqali6tSpYsWKFWLnzp1i/fr1YtasWWLUqFGWJR7sK067aqcnrJfCSElJEa+99prYvHmz2LBhg3jmmWdE3bp1LYX+HFX+FcI7hRBdOXLkiOU6mUwm8fe//92yZMbs2bNt1km74447HB7DemmDyMhI8eijj4o1a9aIrVu3ig8//FC0aNHCcgxXS2G4KuwpH8dZATxn9/X1118vYmJixO233y7ee+89sWbNGrFz506xatUq8dJLL1mWNwAgFixY4LQtjljfW/J9fvfdd4ulS5dalo3p3LmzZZuBAwc6PM6pU6dsrluPHj3E//73P5GTkyN27Nghli9fLl555RWRnZ0tTCaTw8KgzpaB8ITanxtXv1f0uF9yc3MtxTkTExPFa6+9JrZu3So2bNggXnrpJZGamiqSk5NF69atHV4D+XdaRkaG+Pe//y0WLFggtmzZIrZs2SK+/vprcccdd1jakJmZWaugpR6fT6hhABSi1AZAQgjx1ltvqQqAhBDiiy++sFQktf+qU6eO+PLLL91aDFVN+/UIgKZMmWLzkLb/io+PF2vWrFE8T3V1tXjmmWcsvwCdfcXGxorz58+71U5PPf/88x4thirzRwAkhPEWQ3VGjwDI1T1jMpnEs88+67QdSuwXQ5X/AHH01a1bN1FSUqJ4rIKCAnHddde5bC8AMXLkyFr7GzUAEkL7/SJEzaK2SvsmJSWJdevWKV4D699pzr7atGmjuNSF1s8n1HAIjFwaPXq009k41m6//XZs3LgRt956K+rXr4/IyEg0adIEI0aMwNatW11WS/anqVOnYtmyZRgwYABSUlIQGRmJ5s2b46GHHsLevXstXdyOSJKEp59+Gr/99hsef/xxXH311UhKSkJYWBji4uKQkZGBYcOG4eOPP0ZBQYFl9oa3Pfnkk9i5cydGjx6Nli1bok6dOoiNjcUVV1yBRx55BL/88gvuvfden7TFHR06dMCvv/6KadOmoUuXLkhISEBkZCQaNmyIIUOGYNGiRfj666+dFtO74YYbcODAATz55JPIzMxEfHw8oqKi0LRpUwwbNgw//vgj3n77bU3TyvUwd+5cfPjhh7jnnnuQmZmJ1NRUhIeHo27durjyyisxZswY7Ny50zLUqkViYiI2btyIadOmITMzE3Fxcahbty6uueYavPXWW1i7dq0lmdeR1NRUrFu3DosXL8awYcPQokULxMTEICIiAvXr18e1116LRx99FGvXrnWaT2NEetwvEyZMwLJly3DjjTciMTERUVFRSE9Px9ixY7Fz505cd911ivted911WLNmDSZPnoxevXqhVatWiIuLQ0REBFJSUnDDDTfg/fffx65duxSHQoP58/EGSQidS40SEZFhzJo1CyNHjgRQk/shV/4mCnXsASIiIqKQwwCIiIiIQg4DICIiIgo5DICIiIgo5DAAIiIiopDDWWBEREQUctgDRERERCGHARARERGFHAZAREREFHIYABEREVHIYQBEREREIYcBEBEREYUcBkBEREQUchgAERERUcj5/ywkosCy17yLAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "x = df[['RM']]\n",
        "y = df['Price']\n",
        "x = (x - x.mean())/x.std()\n",
        "#y = (y - y.mean())/y.std()\n",
        "plt.scatter(x,y)\n",
        "plt.xlabel('Number of rooms per house', size = 20)\n",
        "plt.ylabel('House Price', size = 20)\n",
        "plt.show()\n",
        "#x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2MGgavvPavYH"
      },
      "outputs": [],
      "source": [
        "x = np.c_[np.ones(x.shape[0]),x] #adds ones for the weights\n",
        "# Parameters required for Gradient Descent\n",
        "alpha = 0.05   #learning rate\n",
        "m = y.size  #no. of samples\n",
        "np.random.seed(10)\n",
        "theta = np.random.rand(2)  #initializing theta with some random values for slope\n",
        "#x"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uxnHhmFeavYH"
      },
      "source": [
        "Now the fun starts in batch.  Note that we are using MSE -- 1/(2*m) but the error is simply prediction - y.  Also, as we do things in Numpy the batch for the whole matrix is simply np.dot(error.T, error)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5k3XEEXpavYH"
      },
      "outputs": [],
      "source": [
        "def gradient_descent(x, y, m, theta,  alpha):\n",
        "    cost_list = []   #to record all cost values to this list\n",
        "    theta_list = []  #to record all theta_0 and theta_1 values to this list\n",
        "    prediction_list = []\n",
        "    run = True\n",
        "    cost_list.append(1e10)    #we append some large value to the cost list\n",
        "    i=0\n",
        "    while run:\n",
        "        prediction = np.dot(x, theta)   #predicted y values theta_1*x1+theta_2*x2\n",
        "        prediction_list.append(prediction)\n",
        "        error = prediction - y #compare to y_pred[j] - y_actual[j] in other file\n",
        "        cost = 1/(2*m) * np.dot(error.T, error)   #  (1/2m)*sum[(error)^2]\n",
        "        cost_list.append(cost)\n",
        "        theta = theta - (alpha * (1/m) * np.dot(x.T, error))\n",
        "        # compare to theta = theta - learning_rate*grad in other file\n",
        "        theta_list.append(theta)\n",
        "        if cost_list[i]-cost_list[i+1] < 1e-9:   #checking if the change in cost function is less than 10^(-9)\n",
        "            run = False\n",
        "        i+=1\n",
        "    cost_list.pop(0)   # Remove the large number we added in the begining\n",
        "    return prediction_list, cost_list, theta_list\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8DoymPORavYH"
      },
      "source": [
        "This might take a second, but now output the results!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mvxYPyY6avYH",
        "outputId": "a4f04834-6176-48d8-80d2-e2da5d0ac923"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[22.53268597  6.39526168]\n"
          ]
        }
      ],
      "source": [
        "prediction_list, cost_list, theta_list = gradient_descent(x, y, m, theta, alpha)\n",
        "theta = theta_list[-1]\n",
        "print(theta)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1V1Kgme7avYI"
      },
      "source": [
        "Visualizations of the slope convergence"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "8xumcATGavYI",
        "outputId": "ca068eab-b8aa-4165-a250-7f54a87f01db"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.title('Cost Function J', size = 30)\n",
        "plt.xlabel('No. of iterations', size=20)\n",
        "plt.ylabel('Cost', size=20)\n",
        "plt.plot(cost_list)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "59rCSV41ALM4",
        "outputId": "a3d2e1b0-0ba2-4370-d089-1fa43006e454"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Actual Value  Predicted Values\n",
            "0          24.0         25.175610\n",
            "1          21.6         23.773894\n",
            "2          34.7         30.727866\n",
            "3          33.4         29.025781\n",
            "4          36.2         30.381987\n",
            "5          28.7         23.855812\n",
            "6          22.9         20.051152\n",
            "7          27.1         21.507481\n",
            "8          16.5         16.583268\n",
            "9          18.9         19.978336\n"
          ]
        }
      ],
      "source": [
        "def y_predicted(theta,x):\n",
        "    y_pred = np.zeros(len(x))\n",
        "    for i in range(0,len(x)-1):\n",
        "        for j in range(0,len(theta)-1):\n",
        "            y_pred[i] = y_pred[i]+(theta[j]*x[i][j])#for the weights\n",
        "        y_pred[i]+= theta[-1] #for the bias\n",
        "    return y_pred\n",
        "\n",
        "def regression_test(x_test,theta):\n",
        "    row = x_test.shape[0]\n",
        "    column = x_test.shape[1]\n",
        "    new_x_test = np.ones((row,column+1))\n",
        "    new_x_test[:,0:column] = x_test\n",
        "    y_pred = y_predicted(theta,new_x_test)\n",
        "    return(y_pred)\n",
        "\n",
        "pred_df = pd.DataFrame(\n",
        "    {\n",
        "        'Actual Value' : y,\n",
        "     'Predicted Values' :  np.dot(x,theta),\n",
        "    }\n",
        ")\n",
        "print(pred_df.head(10))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "prediction = np.dot(x, theta)   #predicted y values theta_1*x1+theta_2*x2"
      ],
      "metadata": {
        "id": "4OjX6WdnQq-p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "prediction"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eu0P_2p3Q6rE",
        "outputId": "195dedfc-ef84-47e7-aadc-38c529f7e747"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([25.17561049, 23.77389363, 30.7278656 , 29.02578084, 30.38198741,\n",
              "       23.85581214, 20.05115208, 21.50748129, 16.58326816, 19.97833562,\n",
              "       23.37340309, 20.02384591, 18.931599  , 19.47772246, 20.81572492,\n",
              "       18.43098584, 19.35029365, 19.85090682, 14.99040808, 17.45706568,\n",
              "       16.02804264, 19.62335538, 21.23441957, 18.23984263, 19.25017102,\n",
              "       16.29200231, 18.23984263, 20.3697241 , 24.44744588, 26.07671419,\n",
              "       17.32963687, 20.59727554, 19.48682452, 17.22041218, 20.81572492,\n",
              "       19.33208954, 18.49470024, 18.57661876, 19.63245744, 25.35765164,\n",
              "       29.26243433, 26.95051171, 21.48017512, 21.86246154, 20.56996937,\n",
              "       17.04747309, 17.99408708, 20.21498912, 14.4715908 , 16.31930849,\n",
              "       19.60515126, 20.98866401, 24.59307881, 19.92372328, 18.92249695,\n",
              "       31.31039728, 23.42801544, 27.36920636, 21.26172574, 19.27747719,\n",
              "       17.58449449, 19.63245744, 24.09246564, 26.87769525, 29.99059894,\n",
              "       22.58152409, 18.00318913, 18.83147637, 16.24649203, 18.89519077,\n",
              "       23.7374854 , 19.58694715, 20.53356114, 22.1719315 , 22.42678911,\n",
              "       22.54511586, 22.48140145, 21.21621545, 22.05360475, 18.79506814,\n",
              "       26.55912324, 25.57610102, 22.69074878, 21.46197101, 23.48262778,\n",
              "       25.67622366, 20.07845826, 21.04327636, 29.10769935, 29.7630475 ,\n",
              "       23.7374854 , 23.6282607 , 23.96503683, 21.86246154, 22.20833973,\n",
              "       25.63071337, 21.42556278, 38.77408448, 36.50767215, 32.8304409 ,\n",
              "       26.55912324, 27.05063435, 23.6282607 , 21.18890928, 21.46197101,\n",
              "       18.58572082, 18.44918995, 21.0978887 , 24.25630268, 22.02629857,\n",
              "       21.71682862, 26.44989855, 19.15004839, 20.77931669, 22.25385001,\n",
              "       19.28657925, 21.54388952, 20.1330706 , 18.77686403, 17.49347391,\n",
              "       18.75865991, 19.97833562, 19.58694715, 18.63123111, 18.84057843,\n",
              "       19.81449859, 16.41943112, 17.14759572, 23.8649142 , 16.6378805 ,\n",
              "       24.11066976, 22.90919816, 23.32789281, 18.32176115, 17.73012741,\n",
              "       22.99111668, 19.41400806, 24.07426153, 18.64033316, 21.31633809,\n",
              "       21.52568541, 11.01280893, 14.50799903, 15.09963277,  9.95697025,\n",
              "       21.12519488, 16.55596198, 10.16631758, 12.53285254, 16.2737982 ,\n",
              "       21.05237842, 14.51710109, 10.94909453, 17.29322864, 21.11609282,\n",
              "       21.32544014, 13.31562949, 28.52516767, 20.54266319, 24.58397675,\n",
              "       22.21744178, 33.4948911 , 36.34383511, 41.55931409, 18.61302699,\n",
              "       20.86123521, 37.49979642, 18.82237431, 22.84548375, 23.60095453,\n",
              "       18.8041702 , 18.84968049, 16.04624676, 23.72838334, 18.65853728,\n",
              "       24.91165082, 20.12396855, 22.80907552, 27.76969689, 28.8619438 ,\n",
              "       36.00705898, 21.25262368, 30.45480387, 25.0663858 , 16.3375126 ,\n",
              "       21.3345422 , 36.60779478, 27.0597364 , 25.0026714 , 30.7278656 ,\n",
              "       28.59798413, 26.66834793, 30.6641512 , 27.22357344, 25.43957016,\n",
              "       37.00828531, 31.65627547, 30.01790511, 31.53794872, 28.81643351,\n",
              "       30.27276272, 21.41646072, 34.59624006, 36.80804005, 38.45551247,\n",
              "       18.94980312, 22.90919816, 17.9667809 , 20.52445908, 13.97097764,\n",
              "       19.57784509, 14.51710109, 18.18523029, 23.35519898, 14.58991755,\n",
              "       21.59850187, 18.92249695, 25.78544835, 19.49592657, 23.33699486,\n",
              "       28.59798413, 21.43466483, 27.94263599, 25.56699896, 40.56718982,\n",
              "       44.74503424, 38.51012481, 30.52762033, 35.28799644, 24.96626317,\n",
              "       19.7689883 , 32.79403267, 41.21343591, 40.39425073, 26.55002118,\n",
              "       20.72470434, 25.68532571, 32.30252156, 24.32001708, 25.45777427,\n",
              "       28.10647302, 20.80662286, 23.200464  , 23.51903601, 16.23738997,\n",
              "       16.34661466, 20.92494961, 21.9989924 , 23.88311832, 26.47720472,\n",
              "       24.37462942, 23.9286286 , 28.65259648, 40.50347542, 20.92494961,\n",
              "       18.81327226, 33.17631908, 44.55389103, 32.07497012, 27.60585986,\n",
              "       30.89170264, 33.77705488, 41.76866142, 32.02035777, 30.91900881,\n",
              "       15.93702207, 29.17141376, 40.8493536 , 33.321952  , 19.21376279,\n",
              "       18.63123111, 22.12642121, 24.83883436, 35.33350672, 26.84128702,\n",
              "       27.71508455, 31.47423432, 27.46022694, 24.32911914, 27.33279813,\n",
              "       36.50767215, 28.75271911, 34.91481208, 37.44518408, 29.84496602,\n",
              "       24.06515947, 22.03540063, 21.84425742, 22.80907552, 25.08458991,\n",
              "       27.77879895, 30.39108947, 25.67622366, 21.0978887 , 20.02384591,\n",
              "       26.11312242, 24.93895699, 18.03049531, 23.08213725, 29.41716931,\n",
              "       27.86981953, 25.31214135, 24.44744588, 28.88014792, 31.19207054,\n",
              "       25.54879485, 32.86684913, 27.66957426, 25.72173394, 19.68706978,\n",
              "       10.59411428, 21.05237842, 20.15127472, 22.3630747 , 25.10279403,\n",
              "       17.25682041, 19.15915044, 17.95767885, 23.41891338, 20.9704599 ,\n",
              "       23.81940391, 23.36430104, 20.31511175, 17.28412659, 23.71928128,\n",
              "       23.8649142 , 22.78176935, 20.69739817, 18.7404558 , 22.97291256,\n",
              "       21.25262368, 17.26592247, 20.22409118, 22.81817758, 22.76356524,\n",
              "       20.27870352, 18.74955785, 18.98621135, 20.47894879, 19.80539653,\n",
              "       19.65066155, 31.23758082, 24.85703848, 26.27695945, 27.8971257 ,\n",
              "       20.0693562 , 19.01351752, 24.63858909, 25.72173394, 28.48875944,\n",
              "       24.4019356 , 25.21201872, 18.88608872, 26.5682253 , 16.874534  ,\n",
              "       19.35939571, 21.8715636 , 23.53724013, 21.0978887 , 20.96135784,\n",
              "       23.5645463 , 22.22654384, 14.13481467, 18.14882205, 45.2456474 ,\n",
              "       -2.25799099, 10.50309371,  0.49083039, 10.56680811, 26.15863271,\n",
              "       29.18961787, 21.90797183, 18.8041702 ,  9.98427643,  2.99389622,\n",
              "       31.89292897, 25.84916275, 27.16896109, 23.40070927, 21.97168623,\n",
              "       28.75271911, 24.90254876, 15.71857269, 15.57293977,  5.08736946,\n",
              "       13.36113978,  7.67235381, 10.83986984,  9.74762293, 14.38967228,\n",
              "       17.32963687, 20.40613233, 11.16754391, 21.6986245 , 18.91339489,\n",
              "       24.2289965 , 23.6282607 , 17.63910683, 14.96310191, 18.59482288,\n",
              "       19.82360065, 23.06393314, 23.61915865, 14.01648792, 15.6730624 ,\n",
              "       17.05657515,  2.99389622, 16.37392083, 16.45583935, 27.69688043,\n",
              "       17.73012741, 25.92197921,  7.45390442, 12.25068876,  6.46178015,\n",
              "       23.89222037, 27.0597364 , 13.60689533, 19.55053892, 27.44202282,\n",
              "       23.68287305, 19.99653974, 16.73800313, 20.87943932, 15.98253236,\n",
              "       18.99531341, 18.45829201, 21.78054302, 21.6986245 , 23.40070927,\n",
              "       23.10944342, 27.52394134, 23.81030186, 23.91042449, 21.83515537,\n",
              "       25.6671216 , 24.13797593, 21.32544014, 19.35029365, 16.54685992,\n",
              "       18.28535292, 23.63736276, 21.935278  , 24.35642531, 18.61302699,\n",
              "       24.11977181, 23.04572902, 22.22654384, 21.62580804, 23.7374854 ,\n",
              "       26.7593685 , 25.90377509, 22.64523849, 32.62109357, 26.5682253 ,\n",
              "       24.72050761, 19.72347801, 19.35939571, 22.68164672, 20.67919406,\n",
              "       26.32246974, 23.36430104, 22.82727964, 24.61128292, 21.84425742,\n",
              "       17.74833152, 19.50502863, 19.96923357, 19.26837513, 17.32963687,\n",
              "       21.46197101, 22.02629857, 23.91952655, 28.8619438 , 14.72644841,\n",
              "       21.41646072, 24.34732325, 13.60689533, 21.62580804, 22.02629857,\n",
              "       22.14462532, 26.76847056, 29.59921046, 17.7756377 , 18.76776197,\n",
              "       22.78176935, 20.97956196, 19.07723193, 14.97220397, 14.60812167,\n",
              "       11.68636119, 19.78719242, 19.78719242, 17.27502453, 19.26837513,\n",
              "       16.9382484 , 14.38967228, 18.06690354, 20.11486649, 16.01894059,\n",
              "       20.18768295, 25.33944753, 21.0341743 , 28.82553557, 27.16896109,\n",
              "       20.21498912])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}